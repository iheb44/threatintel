# config/haproxy.cfg
global
    maxconn 4096
    log stdout local0
    
defaults
    mode http
    timeout connect 5s
    timeout client 30s
    timeout server 30s
    option httplog
    
frontend crawler_frontend
    bind *:80
    stats enable
    stats uri /stats
    stats refresh 30s
    
    # Route to Kibana
    acl is_kibana path_beg /kibana
    use_backend kibana_backend if is_kibana
    
    # Route to Grafana
    acl is_grafana path_beg /grafana
    use_backend grafana_backend if is_grafana
    
    # Default to API
    default_backend api_backend
    
backend api_backend
    balance roundrobin
    server worker1 celery-worker:8001 check
    server worker2 celery-worker:8002 check
    server worker3 celery-worker:8003 check
    
backend kibana_backend
    server kibana kibana:5601
    
backend grafana_backend
    server grafana grafana:3000

---
# config/opentaxii.yml
domain: "taxii.threatintel.local"
support_basic_auth: true
support_api_key_auth: true

persistence_api:
  class: opentaxii.persistence.sqldb.SQLDatabaseAPI
  parameters:
    db_connection: postgresql://crawler:SecurePass123!@postgres:5432/threatintel
    create_tables: true

auth_api:
  class: opentaxii.auth.sqldb.SQLDatabaseAPI
  parameters:
    db_connection: postgresql://crawler:SecurePass123!@postgres:5432/threatintel
    create_tables: true
    secret: "change-this-secret-key"

taxii1:
  persistence_api:
    class: opentaxii.persistence.sqldb.Taxii1SQLDatabaseAPI
    parameters:
      db_connection: postgresql://crawler:SecurePass123!@postgres:5432/threatintel
      create_tables: true

services:
  - id: threat-intel-collection
    type: DATA_SET
    address: /services/threat-intel
    description: Threat Intelligence Collection
    destination_collection_required: true
    accept_all_content: true
    authentication_required: true

collections:
  - name: threat-intel
    type: DATA_SET
    description: Threat Intelligence IoCs
    available: true
    accept_all_content: true

---
# config/celery_config.py
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    # Crawl high-priority sites every 30 minutes
    'crawl-high-priority': {
        'task': 'crawler.orchestrate_crawl',
        'schedule': crontab(minute='*/30'),
        'args': (['high'],)
    },
    
    # Crawl medium-priority sites every 2 hours
    'crawl-medium-priority': {
        'task': 'crawler.orchestrate_crawl',
        'schedule': crontab(minute=0, hour='*/2'),
        'args': (['medium'],)
    },
    
    # Crawl low-priority sites every 6 hours
    'crawl-low-priority': {
        'task': 'crawler.orchestrate_crawl',
        'schedule': crontab(minute=0, hour='*/6'),
        'args': (['low'],)
    },
    
    # Cleanup old data daily
    'cleanup-old-data': {
        'task': 'crawler.cleanup_old_data',
        'schedule': crontab(hour=2, minute=0),
        'kwargs': {'days': 30}
    },
    
    # Generate STIX bundle every hour
    'generate-stix-bundle': {
        'task': 'crawler.generate_stix_bundle',
        'schedule': crontab(minute=0),
    },
    
    # Health check every 5 minutes
    'health-check': {
        'task': 'crawler.health_check',
        'schedule': crontab(minute='*/5'),
    }
}

---
# config/targets.yaml
sites:
  # High Priority - Critical threat sources
  - name: "cisa_advisories"
    url: "https://www.cisa.gov/news-events/cybersecurity-advisories"
    type: "government"
    priority: "high"
    enabled: true
    max_pages: 10
    pagination_pattern: "?page={page}"
    requires_js: false
    
  - name: "microsoft_security"
    url: "https://www.microsoft.com/en-us/security/blog/"
    type: "vendor"
    priority: "high"
    enabled: true
    max_pages: 10
    requires_js: true
    
  # Medium Priority - Security blogs
  - name: "krebs_security"
    url: "https://krebsonsecurity.com/"
    type: "blog"
    priority: "medium"
    enabled: true
    max_pages: 5
    requires_js: false
    
  # Low Priority - Forums
  - name: "reddit_netsec"
    url: "https://www.reddit.com/r/netsec.json"
    type: "forum"
    priority: "low"
    enabled: true
    max_pages: 3
    requires_js: false

# Proxy pool configuration
proxies:
  rotating:
    - "http://proxy1.example.com:8080"
    - "http://proxy2.example.com:8080"
    - "http://proxy3.example.com:8080"
  
  residential:
    - "socks5://residential1.example.com:1080"
    - "socks5://residential2.example.com:1080"
  
  tor:
    - "socks5://tor:9050"

# IoC enrichment sources
enrichment:
  virustotal:
    api_key: "${VIRUSTOTAL_API_KEY}"
    enabled: true
    
  abuseipdb:
    api_key: "${ABUSEIPDB_API_KEY}"
    enabled: true
    
  shodan:
    api_key: "${SHODAN_API_KEY}"
    enabled: true
    
  misp:
    url: "https://misp.example.com"
    api_key: "${MISP_API_KEY}"
    enabled: false

# PII redaction rules
pii_redaction:
  entities_to_redact:
    - PERSON
    - EMAIL_ADDRESS
    - PHONE_NUMBER
    - CREDIT_CARD
    - IBAN_CODE
    - IP_ADDRESS
    - MEDICAL_LICENSE
    - US_SSN
    - UK_NHS
    - LOCATION
    
  custom_patterns:
    - name: "bitcoin_address"
      pattern: '\b[13][a-km-zA-HJ-NP-Z1-9]{25,34}\b'
      
    - name: "api_key"
      pattern: '\b[A-Za-z0-9]{32,}\b'
      
  hash_salt: "${PII_HASH_SALT}"

# Compliance settings
compliance:
  gdpr:
    enabled: true
    data_retention_days: 90
    right_to_forget: true
    
  hipaa:
    enabled: false
    phi_detection: true
    
  ccpa:
    enabled: true
    consumer_request_api: true
